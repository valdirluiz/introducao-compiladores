
options {
  STATIC = false;
  DEBUG_LOOKAHEAD = true;
}

PARSER_BEGIN(langX)
package parser;

import java.io.*;
import recovery.*;
import syntacticTree.*;


public class langX {
final static String Version = "X++ Compiler - Version 1.0 - 2004";
int contParseError = 0;
boolean debug_recovery;
Token lastError = null;



  public  static void main(String args[]) throws ParseException
  {
  boolean debug_as = false;
  boolean debug_recovery = false;

    String filename = ""; // nome do arquivo a ser analisado
    langX parser;     // analisador l�xico/sint�tico
    int i;
    boolean ms = false;

    System.out.println(Version);
    // l� os par�metros passados para o compilador
    for (i = 0; i < args.length - 1; i++)
    {
        if (args[i].equals("-debug_AS") )
            debug_as = true;
        else
        if (args[i].equals("-debug_recovery") )
            debug_recovery = true;
        else
        {
            System.out.println("Usage is: java langX [-debug_AS] " +
             "[-debug_recovery] inputfile");
            System.exit(0);
        }
    }

    if (args[i].equals("-"))
    {
        System.out.println("Reading from standard input . . .");
        parser = new langX(System.in); // cria AS
     }
     else
    {
        filename = args[args.length-1];
        System.out.println("Reading from file " + filename + " . . .");
        try {  // cria AS
            parser = new langX(new java.io.FileInputStream(filename));
        }
    catch (java.io.FileNotFoundException e) {
               System.out.println("File " + filename + " not found.");
        return;
        }
    }

    ListNode root = null;
    parser.debug_recovery = debug_recovery;
    if (! debug_as) parser.disable_tracing();
    try {
        root = parser.program();
    }
    catch (ParseEOFException e)
    {
    System.err.println(e.getMessage());
    }
    finally {
        System.out.println(parser.token_source.foundLexError() +
                                " Lexical Errors found");
        System.out.println(parser.contParseError + " Syntactic Errors found");
     }

}  // main

static public String im(int x)
{
int k;
String s;
   s = tokenImage[x];
   k = s.lastIndexOf("\"");
   try {s = s.substring(1,k);}
   catch (StringIndexOutOfBoundsException e)
   {}
   return s;
}


boolean eof;    // vari�vel que indica se EOF foi alcan�ado
// o m�todo abaixo consome tokens at� alcan�ar um que perten�a ao conjunto
// de sincroniza��o

void consumeUntil(RecoverySet g,
                 ParseException e,
                 String met) throws ParseEOFException,
                                    ParseException
{
Token tok;

   if ( debug_recovery) // informa��o sobre a recupera��o
   {
       System.out.println();
       System.out.println("*** " + met + " ***");
       System.out.println("     Syncronizing Set: " + g);
   }

   if (g == null) throw e; // se o conjunto � null, propaga a exce��o

   tok = getToken(1); // pega token corrente
   while ( ! eof )  // se n�o chegou ao fim do arquivo
   {
        if ( g.contains(tok.kind ) ) //achou um token no conjunto
        {
             if ( debug_recovery)
               System.out.println("     Found syncronizing token: " +
                                   im(tok.kind));
             break;
        }
        if (debug_recovery)
             System.out.println("     Ignoring token: " + im(tok.kind));
        getNextToken();     // pega pr�ximo token
        tok = getToken(1);
        if (tok.kind == EOF && ! g.contains(EOF) ) // fim da entrada?
            eof = true;
    }
   if ( tok != lastError)
   {
        System.out.println(e.getMessage());
        lastError = tok;
        contParseError++;  // incrementa n�mero de erros
   }
   if ( eof ) throw new ParseEOFException("EOF found prematurely.");
}

}  // langX

PARSER_END(langX)

TOKEN_MGR_DECLS :
{
int countLexError = 0;

public int foundLexError()
{
   return countLexError;
}

}


/* Espacos a serem desprezados no inicio de cada token */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SKIP :
{
  "/*" : multilinecomment
}

SKIP :
{
  "//" : singlelinecomment
}

<multilinecomment> SKIP:
{
   "*/" : DEFAULT
|  <~[]>
}

<singlelinecomment> SKIP:
{
   <["\n","\r"]> : DEFAULT
|   <~[]>
}


/* Palavras reservadas */

TOKEN :
{
  < BREAK: ("break"){1} >
| < CLASS: ("class"){1} >
| < CONSTRUCTOR: ("constructor"){1} >
| < ELSE: ("else"){1} >
| < EXTENDS: ("extends"){1} >
| < FOR: ("for"){1} >
| < IF: ("if"){1} >
| < INT: ("int"){1} >
| < STRING: ("string"){1} >
| < CHAR: ("char"){1} >
| < BOOLEAN: ("boolean"){1} >
| < AND: ("&&"){1} >
| < OR: ("||"){1} >
| < DOUBLE: ("double"){1} >
| < NEW: ("new"){1} >
| < PRINT: ("print"){1} >
| < READ: ("read"){1} >
| < RETURN: ("return"){1} >
| < SUPER: ("super"){1} >
| < WHILE: ("while"){1} >
| < DO: ("do"){1} >
| < SWITCH: ("switch"){1} >
| < CASE: ("case"){1} >
| < DEFAULT_CASE: ("default"){1} >
}


/* constantes */

TOKEN :
{
  < int_constant:((["0"-"9"] (["0"-"9"])* )) >
|

< float_constant:(
                (["0"-"9"] (["0"-"9"])* "." ["0"-"9"] (["0"-"9"])*) |
                ("." ["0"-"9"] (["0"-"9"])*) |
                (["0"-"9"] (["0"-"9"])* "." ["0"-"9"] (["0"-"9"])* ("e" | "E") "-" (["0"-"9"] (["0"-"9"])*)) |
                ("." ["0"-"9"] (["0"-"9"])* ("e" | "E") "-" (["0"-"9"] (["0"-"9"])*))
               ) >
|

  < string_constant:
      "\""( ~["\"","\n","\r"])* "\"" >
|
  < boolean_constant: ("true" | "false") >
|
  < char_constant: "\'" (["0"-"9","A"-"Z","a"-"z"]){1} "\'" >
|
  < null_constant: ("null"){1} >
}

/* Identificadores */

TOKEN :
{
  < IDENT: <LETTER> (<LETTER>|<DIGIT> | "_")* >
|
  < #LETTER:["A"-"Z","a"-"z"] >
|
  < #DIGIT:["0"-"9"] >
}

/* Simbolos especiais */

TOKEN :
{
  < LPAREN: ("("){1} >
| < RPAREN: (")"){1} >
| < LBRACE: ("{"){1} >
| < RBRACE: ("}"){1} >
| < LBRACKET: ("["){1} >
| < RBRACKET: ("]"){1} >
| < SEMICOLON: (";"){1} >
| < COMMA: (","){1} >
| < DOT: ("."){1} >
| < COLON: (":"){1} >
}

/* Operadores */

TOKEN :
{
  < ASSIGN: ("="){1} >
| < GT: (">"){1} >
| < LT: ("<"){1} >
| < EQ: ("=="){1} >
| < LE: ("<="){1} >
| < GE: (">="){1} >
| < NEQ: ("!="){1} >
| < PLUS: ("+"){1} >
| < MINUS: ("-"){1} >
| < STAR: ("*"){1} >
| < SLASH: ("/"){1} >
| < REM: ("%"){1} >
}

/* Trata os erros lexicos */
SPECIAL_TOKEN :
{
<INVALID_LEXICAL:
(~ ["a"-"z", "A"-"Z",
  "0"-"9",
  "\"",
  "(",
  ")",
  "[",
  "]",
  "{",
  "}",
  ";",
  ",",
  ".",
  "=",
  ">",
  "<",
  "!",
  "+",
  "-",
  "*",
  "/",
  "%",
  ":",
  "_",
  " ",
  "\t",
  "\n",
  "\r",
  "\f"
])+>
   {
    System.err.println("Line " + input_stream.getEndLine() +
                           " - Invalid string found: " + image);
    countLexError++;
   }
|
   <INVALID_CONST:
   "\"" (~ ["\n","\r","\""])* ["\n","\r"]>
   {
    System.err.println("Line " + input_stream.getEndLine() +
                           " - String constant has a \\n: " + image);
    countLexError++;
   }

}



ListNode program() throws ParseEOFException :
{
RecoverySet g = First.program;

ListNode l = null, d = null;
}
{
    <EOF> {return null;}
|
(    l = classlist(g)
    try {
      <EOF> {return l;}
    }
    catch (ParseException e)
    {
       consumeUntil(g, e, "program");
     }
   [ d = program() ]
) { return l;}
}

ListNode classlist(RecoverySet g) throws ParseEOFException :
{
ClassDeclNode c = null;
ListNode l = null;

RecoverySet f = First.classlist.union(g);
}
{
(
   c = classdecl(f) [ l = classlist(g) ]
) { return new ListNode(c, l);}

}

ClassDeclNode classdecl(RecoverySet g) throws ParseEOFException :
{
Token t = null, n = null, e1 = null;
ClassBodyNode c = null;
}
{
try {
   t = <CLASS>  n = <IDENT> [ <EXTENDS> e1 = <IDENT> ] c = classbody(g)
   { return new ClassDeclNode(t, n, e1, c); }
}
catch (ParseException e)
{
    consumeUntil(g, e, "classdecl");
    return new ClassDeclNode(t, n, e1, c);
}
}

ClassBodyNode classbody(RecoverySet g) throws ParseEOFException :
{
ListNode c = null,
         v = null,
         ct = null,
         m = null;
VarDeclNode vd;
ConstructDeclNode cd;
MethodDeclNode md;
Token t = null;

RecoverySet f2 = new RecoverySet(SEMICOLON).union(g).remove(IDENT),
            f3 = First.methoddecl.union(g).remove(IDENT),
            f4 = First.constructdecl.union(f3).remove(IDENT),
            f5 = First.vardecl.union(f4).remove(IDENT);
}
{
try {
   t = <LBRACE>
      [c = classlist(f5)]
      (LOOKAHEAD(3) vd = vardecl(f2) <SEMICOLON>
        { if ( v == null)
              v = new ListNode(vd);
          else
              v.add(vd);
        }
      )*
      (cd = constructdecl(f4)
        { if ( ct == null)
              ct = new ListNode(cd);
          else
              ct.add(cd);
        }
      )*
      (md = methoddecl(f3)
        { if ( m == null)
              m = new ListNode(md);
          else
              m.add(md);
        }
      )*
   <RBRACE>
   { return new ClassBodyNode(t, c, v, ct, m); }
}
catch (ParseException e)
{
   consumeUntil(g, e, "classbody");
   return new ClassBodyNode(t, c, v, ct, m);
}
}


VarDeclNode vardecl(RecoverySet g) throws ParseEOFException :
{
Token t1 = null, t2;
int k = 0;
ListNode l = null;
}
{
try {
   ( t1 = <INT> |  t1 = <STRING> | t1 = <DOUBLE> | t1 = <BOOLEAN> | t1 = <CHAR> | t1 = <IDENT> )
   t2 = <IDENT> ( <LBRACKET> <RBRACKET> { k++; } )*
     { l = new ListNode(new VarNode(t2, k)); }
   (<COMMA> { k = 0; }  t2 = <IDENT> ( <LBRACKET> <RBRACKET> { k++; })*
     { l.add(new VarNode(t2, k)); }
   )*
  { return new VarDeclNode(t1, l); }
}
catch (ParseException e)
{
   consumeUntil(g, e, "vardecl");
   return new VarDeclNode(t1, l);
}
}


ConstructDeclNode constructdecl(RecoverySet g) throws ParseEOFException :
{
Token t = null;
MethodBodyNode m = null;
}
{
try {
    t = <CONSTRUCTOR> m = methodbody(g)
       { return new ConstructDeclNode(t, m);}
}
catch (ParseException e)
{
   consumeUntil(g, e, "constructdecl");
   return new ConstructDeclNode(t, m);
}
}

MethodDeclNode methoddecl(RecoverySet g) throws ParseEOFException :
{
Token t1 = null,
      t2 = null;
int k = 0;
MethodBodyNode m = null;
}
{
try {
   ( t1 = <BOOLEAN> | t1 = <DOUBLE> | t1 = <CHAR> | t1 = <INT> | t1 =  <STRING> | t1 = <IDENT> )
   (<LBRACKET> <RBRACKET> { k++; } )*
   t2 = <IDENT> m = methodbody(g)
      { return new MethodDeclNode(t1, k, t2, m); }
}
catch (ParseException e)
{
   consumeUntil(g, e, "methoddecl");
   return new MethodDeclNode(t1, k, t2, m);
}
}

MethodBodyNode methodbody(RecoverySet g) throws ParseEOFException :
{
Token t1 = null;
ListNode l = null;
StatementNode s = null;

RecoverySet f = new RecoverySet(RPAREN).union(g);
}
{
try {
    t1 = <LPAREN> l = paramlist(f) <RPAREN> s = statement(g)
      { return new MethodBodyNode(t1, l, s); }
}
catch (ParseException e)
{
   consumeUntil(g, e, "methodbody");
   return new MethodBodyNode(t1, l, s);
}
}

ListNode paramlist(RecoverySet g) throws ParseEOFException :
{
ListNode p = null, q = null;
int k = 0;
Token t1 = null;
Token t2 = null;
}
{
try {
   [
    ( t1 = <INT> |  t1 = <STRING> | t1 = <BOOLEAN> | t1 = <CHAR> | t1 = <DOUBLE> | t1 = <IDENT>) t2 = <IDENT>
    (<LBRACKET> <RBRACKET> { k++; } )*
       {
         q = new ListNode(new VarNode(t2, k));
     p = new ListNode(new VarDeclNode(t1, q));
       }
    (   <COMMA> {k = 0;}  ( t1 = <INT> |  t1 = <STRING> | t1 = <BOOLEAN> | t1 = <CHAR> | t1 = <DOUBLE> | t1 = <IDENT>)
        t2= <IDENT> (<LBRACKET> <RBRACKET> {k ++;} )*
       {
         q = new ListNode(new VarNode(t2, k));
         p.add(new VarDeclNode(t1, q));
       }
    )*
   ] { return p;}
}
catch (ParseException e)
{
   consumeUntil(g, e, "paramlist");
   return null;
}
}



StatementNode statement(RecoverySet g) throws ParseEOFException :
{
StatementNode s = null;
ListNode l;
Token t1 = null;

RecoverySet f1 = new RecoverySet(SEMICOLON).union(g).remove(IDENT);
RecoverySet f2 = new RecoverySet(RBRACE).union(g).remove(IDENT);
}
{
try {

(
    LOOKAHEAD(<IDENT> <IDENT>)
    s = vardecl(f1) <SEMICOLON>
|
    LOOKAHEAD(1)
    s = atribstat(f1) <SEMICOLON>
|
    s = vardecl(f1) <SEMICOLON>
|
    s = printstat(f1) <SEMICOLON>
|
    s = readstat(f1) <SEMICOLON>
|
    s = returnstat(f1) <SEMICOLON>
|
    s = superstat(f1) <SEMICOLON>
|
    s = ifstat(g)
|
    s = forstat(g)
|
    s = whilestat(g)
|
    s = doWhileStat(g)
|
    s = switchStat(g)
|
    t1 = <LBRACE> l = statlist(f2) <RBRACE> { s = new BlockNode(t1, l); }
|
    t1 = <BREAK> <SEMICOLON> { s = new BreakNode(t1);}
|
    t1 = <SEMICOLON> { s = new NopNode(t1); }
)  {return s;}
}
catch (ParseException e)
{
   consumeUntil(g, e, "statement");
   return new NopNode(t1);
}
}


AtribNode atribstat(RecoverySet g) throws ParseEOFException :
{
ExpreNode e1 = null, e2 = null;
Token t1 = null, t2 = null;

RecoverySet f1 = new RecoverySet(ASSIGN).union(g);
}
{
try {
    e1 = lvalue(f1) t1 = <ASSIGN> ( e2 = alocexpression(g) | e2 = expression(g) | t2 = <float_constant> | t2 = <char_constant> | t2 = <string_constant>)
    { return new AtribNode(t1, e1, e2, t2); }
}
catch (ParseException e)
{
   consumeUntil(g, e, "atribstat");
   return new AtribNode(t1, e1, e2, t2);
}
}

PrintNode printstat(RecoverySet g) throws ParseEOFException :
{
ExpreNode e1 = null;
Token t1 = null;
Token t2 = null;
}
{
try {
    t1 = <PRINT> (e1 = expression(g) | t2 = <string_constant>)
      { return new PrintNode(t1, e1, t2); }
}
catch (ParseException e)
{
   consumeUntil(g, e, "printstat");
   return new PrintNode(t1, e1, t2);
}
}

ReadNode readstat(RecoverySet g) throws ParseEOFException :
{
ExpreNode e1 = null;
Token t = null;
}
{
try {
    t = <READ> e1 = lvalue(g)
      { return new ReadNode(t, e1); }
}
catch (ParseException e)
{
   consumeUntil(g, e, "readstat");
   return new ReadNode(t, e1);
}
}


ReturnNode returnstat(RecoverySet g) throws ParseEOFException :
{
ExpreNode e1 = null;
Token t1 = null;
Token t2 = null;
}
{
try {
    t1 = <RETURN> [ e1 = expression(g) | t2 = <string_constant> | t2 = <char_constant>]
      { return new ReturnNode(t1, e1, t2); }
}
catch (ParseException e)
{
   consumeUntil(g, e, "returnstat");
   return new ReturnNode(t1, e1, t2);
}
}


SuperNode superstat(RecoverySet g) throws ParseEOFException :
{
ListNode l = null;
Token t = null;

RecoverySet f = new RecoverySet(RPAREN).union(g);
}
{
try {
    t = <SUPER> <LPAREN> l = arglist(f) <RPAREN>
      { return new SuperNode(t, l); }
}
catch (ParseException e)
{
   consumeUntil(g, e, "superstat");
   return new SuperNode(t, l);
}
}

IfNode ifstat(RecoverySet g) throws ParseEOFException :
{
ExpreNode e1 = null;
StatementNode s1 = null,
              s2 = null;
Token t = null;
ListNode l = null;
ListNode cl = null;
Token co = null;

RecoverySet f1 = new RecoverySet(RPAREN).union(g),
            f2 = new RecoverySet(ELSE).union(g);
}
{
try {
    t = <IF> <LPAREN> ( (e1 = expression(f1) { if(l==null) l = new ListNode(e1); else l.add(e1);} ) (
    ( co = <AND> {if(cl==null) cl = new ListNode(new AndNode(co)); else cl.add(new AndNode(co));} | co = <OR> {if(cl==null) cl = new ListNode(new OrNode(co)); else cl.add(new OrNode(co));})
    e1 = expression(f1) {l.add(e1);} )* )  <RPAREN> s1 = statement(f2)
    [LOOKAHEAD(1) <ELSE> s2 = statement(g)]
     { return new IfNode(t, l, s1, s2, cl); }
}
catch (ParseException e)
{
   consumeUntil(g, e, "ifstat");
   return new IfNode(t, l, s1, s2, cl);
}
}

ForNode forstat(RecoverySet g) throws ParseEOFException :
{
AtribNode s1 = null,
          s2 = null;
StatementNode s3 = null;
ExpreNode e1 = null;
Token t = null;

RecoverySet f1 = new RecoverySet(SEMICOLON).union(g),
            f2 = new RecoverySet(RPAREN).union(g);
}
{
try {
    t = <FOR> <LPAREN> [s1 = atribstat(f1)] <SEMICOLON>
                   [e1 = expression(f1)] <SEMICOLON>
                   [s2 = atribstat(f2)] <RPAREN>
                    s3 = statement(g)
   { return new ForNode(t, e1, s1, s2, s3); }
}
catch (ParseException e)
{
   consumeUntil(g, e, "forstat");
   return new ForNode(t, e1, s1, s2, s3);
}
}

ListNode  statlist(RecoverySet g) throws ParseEOFException :
{
ListNode l = null;
StatementNode s = null;

RecoverySet f = First.statlist.remove(IDENT).union(g);
}
{
   s = statement(f) [ l = statlist(g)]
    { return new ListNode(s, l); }
}

ExpreNode lvalue(RecoverySet g) throws ParseEOFException :
{
ExpreNode e1 = null,
          e2 = null;
Token t1 = null,
      t2 = null;
ListNode l = null;
}
{
try {
   t1 = <IDENT> { e1 = new VarNode(t1); }
   (
       t1 = <LBRACKET> e2 = expression(null) <RBRACKET>
         { e1 = new IndexNode(t1, e1, e2); }
   |
       LOOKAHEAD(3)
       t1 = <DOT> t2 = <IDENT> <LPAREN> l = arglist(null) <RPAREN>
         { e1 = new CallNode(t1, e1, t2, l); }
   |
       t1 = <DOT> t2 = <IDENT>
         { e1 = new DotNode(t1, e1, t2); }
   )*
   { return e1;}
}
catch (ParseException e)
{
   consumeUntil(g, e, "lvalue");
   return new VarNode(t1);
}
}



ExpreNode alocexpression(RecoverySet g) throws ParseEOFException :
{
ExpreNode e1 = null,
          e2 = null;
ListNode l = null;
Token t1, t2;

RecoverySet f1 = new RecoverySet(RPAREN).union(g),
            f2 = new RecoverySet(RBRACKET).union(g);
}
{
    t1 = <NEW>
    (
      LOOKAHEAD(2) t2 = <IDENT> <LPAREN> l = arglist(f1) <RPAREN>
         { e1 = new NewObjectNode(t1, t2, l); }
|
      ( t2 = <INT> | t2 = <STRING> | t2 = <IDENT> )
      (<LBRACKET> e2 = expression(f2) <RBRACKET>
              {
                if ( l == null )
                   l = new ListNode(e2);
                else
                   l.add(e2);
              }
       )+
          { e1 = new NewArrayNode(t1, t2, l); }
    )
    { return e1; }
}


ExpreNode expression(RecoverySet g) throws ParseEOFException :
{
ExpreNode e1 = null, e2 = null;
Token t = null;

}
{
try {
    e1 = numexpr()
    [
      ( t = <LT> | t = <GT> | t = <LE> | t = <GE> | t = <EQ> | t = <NEQ>)
      e2 = numexpr()
        { e1 = new RelationalNode(t, e1, e2); }
    ]
    { return e1; }
}
catch (ParseException e)
{
   consumeUntil(g, e, "expression");
   return new RelationalNode(t, e1, e2);
}
}


ExpreNode numexpr() throws ParseEOFException :
{
ExpreNode e1 = null, e2;
Token t;
}
{
    e1 = term()
    (
       (t = <PLUS> | t = <MINUS>)
       e2 = term()
         { e1 = new AddNode(t, e1, e2); }
    )*
    {return e1; }
}

ExpreNode term() throws ParseEOFException :
{
ExpreNode e1 = null, e2;
Token t;
}
{
    e1 = unaryexpr()
    (
       ( t = <STAR> | t = <SLASH>| t = <REM>)
       e2 = unaryexpr()
         { e1 = new MultNode(t, e1, e2); }
    )*
    { return e1; }
}

ExpreNode unaryexpr() throws ParseEOFException :
{
ExpreNode e;
Token t = null;
}
{
   [( t = <PLUS> | t = <MINUS>)] e = factor()
   { return ( (t == null) ? e : new UnaryNode(t, e));}
}


ExpreNode factor() throws ParseEOFException :
{
ExpreNode e = null;
Token t;
}
{
    (
       t = <int_constant> { e = new IntConstNode(t); }
    |
       t = <boolean_constant> {e = new BooleanConstNode(t); }
    |
       e = lvalue(null)
    |
       <LPAREN> e = expression(null) <RPAREN>
    )
    { return e; }
}

ListNode arglist(RecoverySet g) throws ParseEOFException :
{
ListNode l = null;
ExpreNode e = null;
Token t = null;
RecoverySet f =  new RecoverySet(COMMA).union(g);
}
{

      [ (
            t = <float_constant> { if(l==null) l = new ListNode(new FloatConstNode(t)); else l.add(new FloatConstNode(t)); }
          | t = <string_constant> { if(l==null) l = new ListNode(new StringConstNode(t)); else l.add(new StringConstNode(t)); }
          | t = <char_constant>   { if(l==null) l = new ListNode(new CharConstNode(t)); else l.add(new CharConstNode(t)); }
          | e = expression(f)     { if(l==null) l = new ListNode(e); else l.add(e); }
         )
          (<COMMA> (
          t = <float_constant>  {l.add(new FloatConstNode(t)); }
        | t = <string_constant> {l.add(new StringConstNode(t)); }
        | t = <char_constant>   {l.add(new CharConstNode(t)); }
        | e = expression(f)     {l.add(e);}
                   )
         )*]

    { return l;}
}

WhileNode whilestat(RecoverySet g)  throws ParseEOFException :
{
  RecoverySet f1 = new RecoverySet(RPAREN).union(g);
  Token t1 = null;
  ExpreNode e1 = null;
  StatementNode s3 = null;
  ListNode l = null;
}
{
    try {
      t1 = <WHILE>
      <LPAREN> ( (e1 = expression(f1) { if(l==null) l = new ListNode(e1); else l.add(e1);} ) ((<AND> | <OR>) e1 = expression(f1) {l.add(e1);} )* ) <RPAREN>
        s3 = statement(g)
      {return new WhileNode(t1, l, s3);}
    } catch (ParseException e) {
		consumeUntil(g, e, "whilestat");
    {return new WhileNode(t1, l, s3);}
	}
}

DoWhileNode doWhileStat(RecoverySet g) throws ParseEOFException :
{
    RecoverySet f1 = new RecoverySet(RPAREN).union(g);
    Token t1 = null;
    StatementNode s1 = null;
    ExpreNode e1 = null;
    ListNode l = null;
}
{
    try {
      t1 = <DO> s1 = statement(g)
      <LPAREN>
      ( (e1 = expression(f1) { if(l==null) l = new ListNode(e1); else l.add(e1);} ) ((<AND> | <OR>) e1 = expression(f1) {l.add(e1);} )* )
      <RPAREN>
      {return new DoWhileNode(t1, s1, l);}
    } catch (ParseException e) {
		    consumeUntil(g, e, "doWhileStat");
        {return new DoWhileNode(t1, s1, l);}
    }
}


SwitchNode switchStat(RecoverySet g) throws ParseEOFException :
{
  RecoverySet f1 = new RecoverySet(RBRACE).union(g);
  Token t1 = null;
}
{
    try {
    t1 = <SWITCH> <LPAREN> <IDENT> <RPAREN> <LBRACE> switchCaseStat(g) (switchCaseStat(f1))+  <RBRACE>
    {return new SwitchNode(t1);}
    } catch (ParseException e) {
		  consumeUntil(g, e, "switchStat");
      {return new SwitchNode(t1);}
    }
}



void switchCaseStat(RecoverySet g) throws ParseEOFException :
{
}
{
    try {
      (<CASE> factor() | <DEFAULT_CASE>) <COLON> (statement(g))+
    } catch (ParseException e) {
		    consumeUntil(g, e, "switchCaseStat");
    }
}
